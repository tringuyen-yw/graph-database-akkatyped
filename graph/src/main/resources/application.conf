akka {

  extensions = [akka.persistence.Persistence]

  actor {
    provider = "cluster"
    serializers {
      jackson-json = "akka.serialization.jackson.JacksonJsonSerializer"
      jackson-cbor = "akka.serialization.jackson.JacksonCborSerializer"
    }

    serialization-bindings {
      "com.example.graph.GraphNodeEntity$GraphNodeEvent" = jackson-json
      "com.example.graph.GraphNodeEntity$GraphNodeState" = jackson-json
      "com.example.graph.GraphNodeEntity$GraphNodeCommand" = jackson-json
      "com.example.graph.GraphNodeEntity$GraphNodeCommandReply" = jackson-json
      "com.example.graph.GraphNodeEntity$EdgeDirection" = jackson-json
      "com.example.graph.GraphNodeEntity$Edge" = jackson-json
    }
  }

  remote.artery {
    canonical {
      hostname = "127.0.0.1"
      hostname = ${?REMOTE_HOST_NAME}
      port = 2552
      port = ${?REMOTE_PORT}
    }
  }


  cluster {
    seed-nodes = [
      "akka://ClusterSystem@127.0.0.1:2551",
      "akka://ClusterSystem@127.0.0.1:2552"]
    roles = [node]
    sharding.role = "node"
  }
}

cinnamon.akka {
  actors {
    "/user/*" {
      report-by = class
      traceable = on
    }
  }
}

cinnamon.akka {
  persistence.entities {
    "/system/sharding/graph/*" {
      report-by = group
      command-type = on
      traceable = on
    }
  }
}

akka.persistence.journal.plugin = "cassandra-journal"
akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"

cinnamon.prometheus {
  exporters += http-server

  http-server {
    // Set this to listen on all interfaces, so it will listen on the container's external interface.
    host = "0.0.0.0"
    port = 9001
    port = ${?PROMETHEUS_PORT}
  }
}

cinnamon.slf4j.mdc {
  log-correlation += opentracing-trace-id
  opentracing-trace-id {
    all-scopes = on
  }
}

cinnamon.opentracing {
  akka {
    trace-system-messages = on
  }

  tracer {
    reporters += trace-logging
    sampler = rate-limiting-sampler

    rate-limiting-sampler {
      # Maximum number of sampled traces per second
      max-traces-per-second = 10
    }
  }

  http {
    debug-header = "Trace-Debug"
  }
}

cinnamon.akka.http {
  clients {
    "*:*" {
      paths {
        "*" {
          traceable = on
        }
      }
    }
  }
  servers {
    "*:*" {
      paths {
        "*" {
          traceable = on
        }
      }
    }
  }
}

# https://developer.lightbend.com/docs/telemetry/current/instrumentations/akka/akka.html#actor-remote-metrics
cinnamon.akka.remote.serialization-timing = on
cinnamon.akka.remote.failure-detector-metrics = on

# https://developer.lightbend.com/docs/telemetry/current/instrumentations/akka/akka.html#persistence-metrics
cinnamon.akka.cluster.domain-events = on
cinnamon.akka.cluster.member-events = on
cinnamon.akka.cluster.singleton-events = on

# https://developer.lightbend.com/docs/telemetry/current/instrumentations/akka/akka.html#cluster-metrics
cinnamon.akka.cluster.shard-region-info = on
cinnamon.akka.cluster.node-metrics = on

# https://developer.lightbend.com/docs/telemetry/current/instrumentations/akka/akka.html#split-brain-resolver-events
cinnamon.akka.cluster.split-brain-resolver-events = on

cassandra-journal {
  contact-points = ["localhost"]
  contact-points = ${?CASSANDRA_CONTACT_POINTS}
  port = 9042
  port = ${?CASSANDRA_PORT}
  keyspace = "akka"
  keyspace = ${?CASSANDRA_KEYSPACE}
}

GraphConfig {
  http {
    interface = "0.0.0.0"
    port = 8081
    port = ${?HTTP_PORT}
  }

  readSideConfig {
    producerParallelism = 1
    idleTimeout = 10 seconds
  }
}

