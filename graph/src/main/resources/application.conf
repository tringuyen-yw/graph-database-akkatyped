akka {

  extensions = [akka.persistence.Persistence]

  actor {
    provider = "cluster"
    serializers {
      jackson-json = "akka.serialization.jackson.JacksonJsonSerializer"
      jackson-cbor = "akka.serialization.jackson.JacksonCborSerializer"
    }

    serialization-bindings {
      "com.example.graph.GraphNodeEntity$GraphNodeEvent" = jackson-json
      "com.example.graph.GraphNodeEntity$GraphNodeState" = jackson-json
      "com.example.graph.GraphNodeEntity$GraphNodeCommand" = jackson-json
      "com.example.graph.GraphNodeEntity$GraphNodeCommandReply" = jackson-json
      "com.example.graph.GraphNodeEntity$EdgeDirection" = jackson-json
      "com.example.graph.GraphNodeEntity$Edge" = jackson-json
    }
  }

  remote.artery {
    canonical {
      hostname = "127.0.0.1"
      hostname = ${?REMOTE_HOST_NAME}
      port = 2551
      port = ${?REMOTE_PORT}
    }
  }


  cluster {
    seed-nodes = [
      "akka://ClusterSystem@127.0.0.1:2551"]
    roles = [node]
    sharding.role = "node"
    sharding.passivate-idle-entity-after = off
  }


//  remote {
//    artery {
//      transport = tcp
//    }
//  }
}

//akka.discovery {
//  kubernetes-api {
//    pod-label-selector = "application=%s"
//  }
//
//  config.services = {
//    local-cluster = {
//      endpoints = [
//        {
//          host = "127.0.0.1"
//          port = 8558
//        },
//        {
//          host = "127.0.0.1"
//          port = 8559
//        }
//      ]
//    }
//  }
//}

//akka.management {
//  http {
//    http.port = 8558
//    http.port = ${?AKKA_MANAGEMENT_PORT}
//    bind-hostname= 0.0.0.0
//  }
//
//  cluster.bootstrap {
//    contact-point-discovery {
//      service-name = "local-cluster"
//      discovery-method = config
//    }
//  }
//
//    cluster.bootstrap {
//      contact-point-discovery {
//        # For the kubernetes API this value is substributed into the %s in pod-label-selector
//        service-name = ${APPLICATION_NAME}
//        discovery-method = kubernetes-api
//        required-contact-point-nr = ${REQUIRED_CONTACT_POINT_NR}
//      }
//    }
//
//    cluster {
//      seed-nodes = []
//    }
//
//  health-checks {
//    readiness-checks {
//      # Default health check for cluster. Overwrite the setting to replace it with
//      # your implementation or set it to "" (empty string) to disable this check.
//      cluster-membership = "akka.management.cluster.scaladsl.ClusterMembershipCheck"
//    }
//    readiness-path = "health/ready"
//    liveness-path = "health/alive"
//  }
//}

cinnamon.akka {
  actors {
    "/user/*" {
      report-by = class
      traceable = on
    }
  }
}

cinnamon.akka {
  persistence.entities {
    "/system/sharding/graph/*" {
      report-by = group
      command-type = on
      traceable = on
    }
  }
}

akka.persistence.journal.plugin = "cassandra-journal"
akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"

cinnamon.prometheus {
  exporters += http-server

  http-server {
    // Set this to listen on all interfaces, so it will listen on the container's external interface.
    host = "0.0.0.0"
    port = 9001
    port = ${?PROMETHEUS_PORT}
  }
}

cinnamon.slf4j.mdc {
  log-correlation += opentracing-trace-id
  opentracing-trace-id {
    all-scopes = on
  }
}

cinnamon.opentracing {
  akka {
    trace-system-messages = off
  }

  tracer {
    sampler = rate-limiting-sampler

    rate-limiting-sampler {
      # Maximum number of sampled traces per second
      max-traces-per-second = 10
    }
  }

  http {
    debug-header = "Trace-Debug"
  }
}

cinnamon.akka.http {
  clients {
    "*:*" {
      paths {
        "*" {
          traceable = on
        }
      }
    }
  }
  servers {
    "*:*" {
      paths {
        "*" {
          traceable = on
        }
      }
    }
  }
}

# https://developer.lightbend.com/docs/telemetry/current/instrumentations/akka/akka.html#actor-remote-metrics
cinnamon.akka.remote.serialization-timing = on
cinnamon.akka.remote.failure-detector-metrics = on

# https://developer.lightbend.com/docs/telemetry/current/instrumentations/akka/akka.html#persistence-metrics
cinnamon.akka.cluster.domain-events = on
cinnamon.akka.cluster.member-events = on
cinnamon.akka.cluster.singleton-events = on

# https://developer.lightbend.com/docs/telemetry/current/instrumentations/akka/akka.html#cluster-metrics
cinnamon.akka.cluster.shard-region-info = on
cinnamon.akka.cluster.node-metrics = on

# https://developer.lightbend.com/docs/telemetry/current/instrumentations/akka/akka.html#split-brain-resolver-events
cinnamon.akka.cluster.split-brain-resolver-events = on

cassandra-journal {
  contact-points = ["localhost"]
  contact-points = ${?CASSANDRA_CONTACT_POINTS}
  port = 9042
  port = ${?CASSANDRA_PORT}
  keyspace = "graphakka"
  keyspace = ${?CASSANDRA_KEYSPACE}
}

cassandra-snapshot-store {
  contact-points = ["localhost"]
  contact-points = ${?CASSANDRA_CONTACT_POINTS}
  port = 9042
  port = ${?CASSANDRA_PORT}
  keyspace = "graphakka_snapshot"
  keyspace = ${?CASSANDRA_SNAPSHOT_KEYSPACE}
  session-provider = akka.persistence.cassandra.ConfigSessionProvider
}

GraphConfig {
  http {
    interface = "0.0.0.0"
    port = 8081
    port = ${?HTTP_PORT}
  }

  readSideConfig {
    producerParallelism = 1
    idleTimeout = 10 seconds
  }
}

